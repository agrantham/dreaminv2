<?php
/**
 * FuelPHP Controller, process a stripe payment. If set in the configuration 
 * an email is sent to the user making the payment. 
 *
 * @package fuel-stripe
 * @version 0.1.1
 * @author  Devin Hanlon <devin.hanlon@alleluu.com>
 * @author  Juan Manuel Torres <juan.torres@alleluu.com>
 * @license MIT License
 * @copyright  2013-2014 Alleluu Development team
 * @link  https://github.com/alleluu/fuel-stripe
 * @link  http://opensource.org/licenses/MIT
 */

namespace Stripe;

class SecurityException extends \FuelException{}

class Controller_Stripe extends \Controller_Rest
{

    /**
     * Process a stripe payment. Values are passed via POST only.
     * 
     * @param string $email Destination of the receipt.
     * @param float $amount Amount of the transaction. 
     * @param string $token_id Token generated by the stripe API for the card that will be charged. 
     * @param string $subject (Optional) Subject of the email.
     * @param string $description (Optional) Description for the email.
     * @param string $template (Optional) Value will overwrite the default template value.
     * 
     */
    public function action_charge()
    {
        $code = 200; 
        
        $stripe_payment = new Stripe_Payment();
        $val = $stripe_payment->validate();
        
        if (\Input::method() == 'POST' && $val->run()) 
        {
            
            $email = \Security::xss_clean(\Input::post('email'));
            $subject = \Security::xss_clean(\Input::post('subject', null));
            $description = \Security::xss_clean(\Input::post('description', null));
            $template = \Security::xss_clean(\Input::post('template', null));
            $amount = \Security::xss_clean(\Input::post('amount'));
            $token_id = \Security::xss_clean(\Input::post('token_id', null));

            try
            {
                if ( \Config::get('csrf_check') && ! \Security::check_token())
                {
                    throw new SecurityException('Security check failed');
                }
                
                $charge = $stripe_payment->process($token_id, $amount, $email);
                $name = $charge->card->name;
                $options = array(
                    'subject' => $subject, 
                    'description' => $description,
                    'template' => $template,
                    'order_id' => $charge->id,
                    'amount'  => $amount / 100,
                    'name' => $name
                );
                $this->send_email($email, $options);
            
                //$stripeResponse = $charge->_values;
                $message = array( 
                    'email_success' => true,
                    'order_id' => $charge->id,
                ); 
                
            }
            catch(PaymentException $e)
            {
                // The charge failed for some reason. Stripe's message will explain
                $code = 400;
                $message =  $e->getMessage();
            }
            catch(SecurityException $e)
            {
                $code = 403;
                $message =  $e->getMessage();
            }
            catch(\FuelException $e)
            {
                $message = array( 
                    'email_success' => false,
                    'order_id' => $charge->id,
                ); 
            }
        }
        else
        {
            $code = 400;
            $message =  $this->get_validation_errors($val);
        }
        
        $this->response($message, $code);
    }
    
    /**
     * If enabled in the config, this method will prepare all the values and 
     * send the email. 
     * 
     * @param string $email_to email to send the receipt
     * @param array $options array of options including subject, description, template...
     * @throws \Stripe\FuelException
     */
    private function send_email($email_to, $options = array())
    {
        if (\Config::get('send_email'))
        {
            // check options, and set default if not available.
            if(empty($options['subject']))
            {
                $options['subject'] = \Config::get('email.subject');
            }
            
            if(empty($options['description']))
            {
                $options['description'] = \Config::get('email.description');
            }
            
            if(empty($options['template']))
            {
                $options['template'] = \Config::get('email.template');
            }
            
            $driver = \Config::get('email.driver');
            $email_from = \Config::get('email.from');
            $reply_to = \Config::get('email.reply_to');
            $subject = $options['subject'];
            
            $template = $this->get_email_template($options);
            
            try
            {
                //send email
                $Mail = \Email\Email::forge(array('driver' => $driver));
                $Mail->to($email_to);
                $Mail->from($email_from);
                $Mail->reply_to($reply_to);
                $Mail->subject($subject);
                
                if(\Config::get('email.html'))
                {
                    $Mail->html_body($template, false);
                }
                else
                {
                    $Mail->body($template);
                }
                
                $Mail->send();
            }
            catch(\FuelException $e)
            {
                throw $e;
            }
        }
    }

    /**
     * Get an email template using the custom placeholders passed as option values.
     * 
     * @param array $options required to build a custom email from the template
     * @return mixed String or View object based on config values. 
     */
    private function get_email_template($options = array())
    {
        if(\Config::get('email.use_view'))
        {
            \View::set_global('name', $options['name']);
            \View::set_global('description', $options['description']);
            \View::set_global('amount', $options['amount']);
            \View::set_global('order_id', $options['order_id']);
            $email_text = \View::forge($options['template']);
        }
        else
        {
            $email_text = str_replace('$name', $options['name'], $options['template']);
            $email_text = str_replace('$description', $options['description'], $email_text);
            $email_text = str_replace('$amount', $options['amount'], $email_text);
            $email_text = str_replace('$order_id', $options['order_id'], $email_text);
        }
        
        return $email_text;
    }
    
    /**
     * Get a formated string containing the validation error messages. 
     * 
     * @param \Validation $val
     * @return string containing validation errors.
     */
    private function get_validation_errors(\Validation $val)
    {
        $errors = $val->error();
        $error_message = '';

        foreach($errors as $error)
        {
            $error_message .= $error->get_message(false);
        }
        
        return $error_message;
    }
}
